import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { ShoppingCart, CreditCard, Minus, Plus } from 'lucide-react';
import './ProductView.css';

const API_BASE_URL = 'http://localhost:3000'; // Update this to match your server URL

const ProductView = () => {
  const [product, setProduct] = useState(null);
  const [error, setError] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [isAddingToCart, setIsAddingToCart] = useState(false);
  const { id } = useParams();
  const navigate = useNavigate();

  const fetchProduct = useCallback(async () => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/products/${id}`);
      setProduct(response.data);
      setError(null);
    } catch (error) {
      console.error('Error fetching product:', error);
      handleError(error, 'Failed to fetch product details. Please try again later.');
    }
  }, [id]);

  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]);

  const handleAddToCart = async () => {
    setIsAddingToCart(true);
    try {
      const response = await axios.post(`${API_BASE_URL}/api/cart`, {
        productId: product._id,
        quantity: quantity,
        price: product.price,
        title: product.title,
        imageAddress: product.imageAddress
      }, { 
        withCredentials: true,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      if (response.status === 200) {
        alert('Product added to cart successfully!');
      } else {
        throw new Error('Failed to add product to cart');
      }
    } catch (error) {
      console.error('Error adding product to cart:', error);
      handleError(error, 'Failed to add product to cart. Please try again.');
    } finally {
      setIsAddingToCart(false);
    }
  };

  const handleError = (error, defaultMessage) => {
    if (error.response) {
      switch (error.response.status) {
        case 401:
          handleUnauthenticatedError();
          break;
        case 400:
          setError('Invalid request. Please check your input.');
          break;
        default:
          setError(defaultMessage);
      }
    } else if (error.request) {
      setError('No response received from the server. Please check your internet connection.');
    } else {
      setError(defaultMessage);
    }
  };

  const handleUnauthenticatedError = () => {
    const confirmLogin = window.confirm('You need to be logged in to add items to your cart. Would you like to log in now?');
    if (confirmLogin) {
      navigate('/login', { state: { from: `/product/${id}` } });
    }
  };

  const handleBuyNow = () => {
    handleAddToCart();
    navigate('/cart'); // Redirect to cart page after adding item
  };

  const incrementQuantity = () => setQuantity(prev => prev + 1);
  const decrementQuantity = () => setQuantity(prev => Math.max(1, prev - 1));

  if (error) {
    return <div className="error-message">{error}</div>;
  }

  if (!product) {
    return <div className="loading">Loading...</div>;
  }

  return (
    <div className="product-view">
      <div className="product-image-container">
        <img src={product.imageAddress} alt={product.title} className="product-image" />
      </div>
      <div className="product-details">
        <h1 className="product-title">{product.title}</h1>
        <p className="product-price">${parseFloat(product.price).toFixed(2)}</p>
        <p className="product-description">{product.description}</p>
        
        <div className="quantity-selector">
          <button onClick={decrementQuantity} className="quantity-btn" disabled={quantity === 1}>
            <Minus size={20} />
          </button>
          <span className="quantity">{quantity}</span>
          <button onClick={incrementQuantity} className="quantity-btn">
            <Plus size={20} />
          </button>
        </div>
        
        <div className="action-buttons">
          <button 
            className="add-to-cart-btn" 
            onClick={handleAddToCart} 
            disabled={isAddingToCart}
          >
            <ShoppingCart size={20} />
            {isAddingToCart ? 'Adding...' : 'Add to Cart'}
          </button>
          <button className="buy-now-btn" onClick={handleBuyNow} disabled={isAddingToCart}>
            <CreditCard size={20} />
            Buy Now
          </button>
        </div>
      </div>
    </div>
  );
};

export default ProductView;
